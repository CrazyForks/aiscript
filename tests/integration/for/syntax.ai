// Single-expression body.
for let c = 0; c < 3; {
    c += 1;
    print(c);
}
// expect: 1
// expect: 2
// expect: 3

// Block body.
for let a = 0; a < 3; a = a + 1 {
  print(a);
}
// expect: 0
// expect: 1
// expect: 2

// No clauses.
fn foo() {
  for ;; {
    return "done";
  }
}
print(foo()); // expect: done

// No variable.
let i = 0;
for ; i < 2; i = i + 1 {
    print(i);
}
// expect: 0
// expect: 1

// No condition.
fn bar() {
  for let i = 0;; i = i + 1 {
    print(i);
    if i >= 2 { return; }
  }
}
bar();
// expect: 0
// expect: 1
// expect: 2

// No increment.
for let i = 0; i < 2; {
  print(i);
  i = i + 1;
}
// expect: 0
// expect: 1

// Statement bodies.
for ; false; {
    if true { 1; } else { 2; }
}
for ; false; {
    while true { 1; }
}
for ; false; {
    for ;; {
        1;
    }
}

// Object literals are fine in initializer and condition parts
for let obj = {a:1}; len(obj) > 0; {  // This is OK - semicolons make it unambiguous
    print("hi"); // expect: hi
    break;
}